(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) [answered Y; input not from terminal]
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe
[New Thread 10308.0x1f8c]

Thread 1 hit Breakpoint 1, main () at main.c:18
18        a += 1;
(gdb) print a
$5 = 2
(gdb) n
19        a += pow_my(a, 5);
(gdb) print a
$6 = 3
(gdb) n

Thread 1 hit Breakpoint 2, pow_my (a=3, b=5) at main.c:4
4         int itog = a;
(gdb) print itog
$7 = 0
(gdb) print a
$8 = 3
(gdb) print b
$9 = 5
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb) n
6               itog *= a;
(gdb) print itog
$10 = 3
(gdb) print b
$11 = 5
(gdb) print a
$12 = 3
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb) n
6               itog *= a;
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb) n
6               itog *= a;
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb) n
6               itog *= a;
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb) n
6               itog *= a;
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb)
8         return itog;
(gdb)
9       }
(gdb)
main () at main.c:19
19        a += pow_my(a, 5);
(gdb) print a
$13 = 3
(gdb)
$14 = 3
(gdb) n
20        printf("%d", a);
(gdb) print a
$15 = 732
(gdb)
$16 = 732
(gdb) n
21        return 0;
(gdb) n
22      }
(gdb) n

Thread 1 hit Breakpoint 3, 0x00000000004013c1 in __tmainCRTStartup ()
(gdb) run
The program being debugged has been started already.
Start it from the beginning? (y or n) [answered Y; input not from terminal]
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe
[New Thread 11552.0xd40]

Thread 1 hit Breakpoint 1, main () at main.c:18
18        a += 1;
(gdb) n
19        a += pow_my(a, 5);
(gdb)

Thread 1 hit Breakpoint 2, pow_my (a=3, b=5) at main.c:4
4         int itog = a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
8         return itog;
(gdb)
9       }
(gdb)
main () at main.c:19
19        a += pow_my(a, 5);
(gdb)
20        printf("%d", a);
(gdb) s
printf (__format=0x40b01b "%d")
    at d:/gcc/x86_64-w64-mingw32/include/stdio.h:357
357       __builtin_va_list __local_argv; __builtin_va_start( __local_argv, __format );
(gdb) s
358       __retval = __mingw_vfprintf( stdout, __format, __local_argv );
(gdb) s
360       return __retval;
(gdb) s
361     }
(gdb) s
main () at main.c:21
21        return 0;
(gdb)
22      }
(gdb)

Thread 1 hit Breakpoint 3, 0x00000000004013c1 in __tmainCRTStartup ()
=========================================================================================================================
(gdb) run

Thread 1 hit Breakpoint 1, main () at main.c:18
18        a += 1;
(gdb) bt
#0  main () at main.c:18
(gdb) n
19        a += pow_my(a, 5);
(gdb) bt
#0  main () at main.c:19
(gdb) n

Thread 1 hit Breakpoint 2, pow_my (a=3, b=5) at main.c:4
4         int itog = a;
(gdb) bt
#0  pow_my (a=3, b=5) at main.c:4
#1  0x0000000000401621 in main () at main.c:19
(gdb) n
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb)
6               itog *= a;
(gdb)
5         for (int x = 0; x < b; x++) {
(gdb) print a
$17 = 3
(gdb) print itog
$18 = 729
(gdb) n
8         return itog;
(gdb)
9       }
(gdb)
main () at main.c:19
19        a += pow_my(a, 5);
(gdb) bt
#0  main () at main.c:19
(gdb) n
20        printf("%d", a);
(gdb) bt
#0  main () at main.c:20
(gdb) n
21        return 0;
(gdb) bt
#0  main () at main.c:21
(gdb) n
22      }
(gdb)

Thread 1 hit Breakpoint 3, 0x00000000004013c1 in __tmainCRTStartup ()
(gdb) bt
#0  0x00000000004013c1 in __tmainCRTStartup ()
#1  0x00000000004014f6 in mainCRTStartup ()
=========================================================================================================================
В данном примере прекрасно видна работа backtrace, которая позволяет нам понять из какой именно итерации рекурсии была вызвана функция.
Пример на маленьком числе, дабы было нагляднее.

$ gdb a.exe
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.exe...
(gdb) list
1       #include <stdio.h>
2
3       int fibonacci(int N)
4       {
5         if (N == 1 || N == 2)
6               return 1;
7         return fibonacci(N - 1) + fibonacci(N - 2);
8       }
9
10      int main() {
(gdb) list
11        int a = 4;
12        a = fibonacci(a);
13        printf("%d", a);
14      }
(gdb) break 4
Breakpoint 1 at 0x40159f: file main.c, line 5.
(gdb) break 13
Breakpoint 2 at 0x4015f8: file main.c, line 13.
(gdb) run
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe
[New Thread 8284.0x9e8]
warning: Can not parse XML library list; XML support was disabled at compile time

Thread 1 hit Breakpoint 1, fibonacci (N=4) at main.c:5
5         if (N == 1 || N == 2)
(gdb) print N
$1 = 4
(gdb) n
7         return fibonacci(N - 1) + fibonacci(N - 2);
(gdb) n

Thread 1 hit Breakpoint 1, fibonacci (N=3) at main.c:5
5         if (N == 1 || N == 2)
(gdb) n
7         return fibonacci(N - 1) + fibonacci(N - 2);
(gdb)

Thread 1 hit Breakpoint 1, fibonacci (N=2) at main.c:5
5         if (N == 1 || N == 2)
(gdb)
6               return 1;
(gdb) print N
$2 = 2
(gdb) bt
#0  fibonacci (N=2) at main.c:6
#1  0x00000000004015bf in fibonacci (N=3) at main.c:7
#2  0x00000000004015bf in fibonacci (N=4) at main.c:7
#3  0x00000000004015f5 in main () at main.c:12
(gdb) n
8       }
(gdb)

Thread 1 hit Breakpoint 1, fibonacci (N=1) at main.c:5
5         if (N == 1 || N == 2)
(gdb) bt
#0  fibonacci (N=1) at main.c:5
#1  0x00000000004015ce in fibonacci (N=3) at main.c:7
#2  0x00000000004015bf in fibonacci (N=4) at main.c:7
#3  0x00000000004015f5 in main () at main.c:12
(gdb) n
6               return 1;
(gdb)
8       }
(gdb)
fibonacci (N=3) at main.c:7
7         return fibonacci(N - 1) + fibonacci(N - 2);
(gdb)
8       }
(gdb)

Thread 1 hit Breakpoint 1, fibonacci (N=2) at main.c:5
5         if (N == 1 || N == 2)
(gdb) print N
$3 = 2
(gdb) bt
#0  fibonacci (N=2) at main.c:5
#1  0x00000000004015ce in fibonacci (N=4) at main.c:7
#2  0x00000000004015f5 in main () at main.c:12
(gdb) n
6               return 1;
(gdb)
8       }
(gdb)
fibonacci (N=4) at main.c:7
7         return fibonacci(N - 1) + fibonacci(N - 2);
(gdb)
8       }
(gdb)

Thread 1 hit Breakpoint 2, main () at main.c:13
13        printf("%d", a);
(gdb) print a
$4 = 3
(gdb) n
14      }
(gdb)
0x00000000004013c1 in __tmainCRTStartup ()
(gdb)
Single stepping until exit from function __tmainCRTStartup,
which has no line number information.
3[Thread 8284.0x9e8 exited with code 0]
[Inferior 1 (process 8284) exited normally]
=============================================================================================================================================

$ gdb a.exe

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.exe...
(gdb) list
8         }
9         return Func2(n);
10      }
11
12      int Func2(int n) {
13        n += 1;
14        if (n == 10) {
15              return 10;
16        }
17        return Func1(n);
(gdb) list
18
19      }
20
21      int main() {
22        int a = 4;
23        a = Func1(a);
24        printf("%d",a);
25        return 0;
26      }
(gdb) break main.c:Func1
No source file named min.c.
Make breakpoint pending on future shared library load? (y or [n]) [answered N; input not from terminal]
(gdb) break 9
Breakpoint 1 at 0x4015ad: file main.c, line 9.
(gdb) break 17
Breakpoint 2 at 0x4015d7: file main.c, line 17.
(gdb) run
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe
[New Thread 15884.0x3ce4]
warning: Can not parse XML library list; XML support was disabled at compile time

Thread 1 hit Breakpoint 1, Func1 (n=5) at main.c:9
9         return Func2(n);
(gdb) print n
$1 = 5
(gdb) n

Thread 1 hit Breakpoint 2, Func2 (n=6) at main.c:17
17        return Func1(n);
(gdb) n

Thread 1 hit Breakpoint 1, Func1 (n=7) at main.c:9
9         return Func2(n);
(gdb) n

Thread 1 hit Breakpoint 2, Func2 (n=8) at main.c:17
17        return Func1(n);
(gdb) n

Thread 1 hit Breakpoint 1, Func1 (n=9) at main.c:9
9         return Func2(n);
(gdb)
10      }
(gdb) bt
#0  Func1 (n=9) at main.c:10
#1  0x00000000004015df in Func2 (n=8) at main.c:17
#2  0x00000000004015b5 in Func1 (n=7) at main.c:9
#3  0x00000000004015df in Func2 (n=6) at main.c:17
#4  0x00000000004015b5 in Func1 (n=5) at main.c:9
#5  0x0000000000401603 in main () at main.c:23
(gdb) n
Func2 (n=8) at main.c:19
19      }
(gdb)
Func1 (n=7) at main.c:10
10      }
(gdb)
Func2 (n=6) at main.c:19
19      }
(gdb)
Func1 (n=5) at main.c:10
10      }
(gdb)
main () at main.c:24
24        printf("%d",a);
=========================================================================================================================

$ gdb a.exe

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.exe...
(gdb) list
1       #include <stdio.h>
2
3       int main() {
4         int a = 4;
5
6         printf("%d",a);
7         a += 20;
8         printf("%d",a);
9         return 0;
10      }
(gdb) break 4
Breakpoint 1 at 0x40159e: file main.c, line 4.
(gdb) run
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe
[New Thread 1548.0x1148]
warning: Can not parse XML library list; XML support was disabled at compile time

Thread 1 hit Breakpoint 1, main () at main.c:4
4         int a = 4;
(gdb) ptype a
type = int
(gdb) print a
$1 = 0
(gdb) n
6         printf("%d",a);
(gdb) print a
$2 = 4
(gdb) set var a = 10
(gdb) print a
$3 = 10
(gdb) n
7         a += 20;
(gdb) print a
$4 = 10
(gdb) n
8         printf("%d",a);
(gdb) print a
$5 = 30
(gdb) set var a = 100
(gdb) n
9         return 0;
(gdb) print a
$6 = 100
(gdb)
$7 = 100
(gdb) n
10      }
(gdb)
0x00000000004013c1 in __tmainCRTStartup ()



$ gdb a.exe

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from a.exe...
(gdb) run l m
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe l m
[New Thread 8164.0x1f64]
warning: Can not parse XML library list; XML support was disabled at compile time
1: l
2: m
[Thread 8164.0x1f64 exited with code 0]
[Inferior 1 (process 8164) exited normally]
(gdb) set args v w
(gdb) run
Starting program: C:\Users\slava\CLionProjects\Laboratory\a.exe v w
[New Thread 1792.0x3a80]
1: v
2: w
[Thread 1792.0x3a80 exited with code 0]
[Inferior 1 (process 1792) exited normally]















